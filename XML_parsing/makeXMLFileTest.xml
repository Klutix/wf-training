<!--
  ~ Levels Beyond CONFIDENTIAL
  ~
  ~ Copyright 2003 - 2020 Levels Beyond Incorporated
  ~ All Rights Reserved.
  ~
  ~ NOTICE:  All information contained herein is, and remains
  ~ the property of Levels Beyond Incorporated and its suppliers,
  ~ if any.  The intellectual and technical concepts contained
  ~ herein are proprietary to Levels Beyond Incorporated
  ~ and its suppliers and may be covered by U.S. and Foreign Patents,
  ~ patents in process, and are protected by trade secret or copyright law.
  ~ Dissemination of this information or reproduction of this material
  ~ is unlawful and strictly forbidden unless prior written permission is obtained
  ~ from Levels Beyond Incorporated.
  -->
<workflow xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://levelsbeyond.com/schema/workflow"
	xsi:schemaLocation="
		http://levelsbeyond.com/schema/latest
		https://s3-us-west-2.amazonaws.com/schema.levelsbeyond.com/2.3.16.17962/studio.xsd
	"
	id="makeXMLFile"
	name="Make XML"
	executionLabelExpression="Make XML | File Name: xmlFile.name"
	subjectDOClassName=""
	showInUserInterface="true"
	sdkVersion="">

	<initialStepName>make xml s</initialStepName>
		
	<groovyStep name="eval defs"
		resultDataDef="testVal"
		nextStep="end"
	>
		<script>
			return testVal
		</script>
	</groovyStep>
	
	<groovyStep name="make xml"
		resultDataDef="xmlFile"
	>
		<transition condition="${xmlFile.exists()}">
			<targetStepName>end</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>file failed to be created</targetStepName>
		</transition>
		
		<script>
			<![CDATA[
				import java.io.StringWriter
				import groovy.xml.MarkupBuilder
				import groovy.xml.XmlUtil
				import groovy.util.XmlParser
				import groovy.xml.StreamingMarkupBuilder
				
				def xmlBuilder = new StreamingMarkupBuilder()
				xmlBuilder.encoding = "utf-8"
				
				def xml = xmlBuilder.bind {
					mkp.xmlDeclaration()
					MarquisEDL(version: "2.0") {
						FrameRate("TEST")
						ClipList {
							Clip {
								UID("TEST")
								Title("TEST")
								File("TEST")
								Start("TEST")
								End("TEST")
								NumberVideoTracks("1")
								NumberAudioTracks("4")
							}
						}
					}
				}
				
				File file = new File("/reachengine/temp/testFile3.xml")
				FileWriter writer = new FileWriter(file)
				writer.write(xml.toString())
				writer.close()
				
				if (!file.exists())
					return null
				
				return file
			]]>
		</script>
		
	</groovyStep>
	
	<groovyStep name="make xml"
		resultDataDef="xmlFile"
	>
		<transition condition="${xmlFile.exists()}">
			<targetStepName>end</targetStepName>
		</transition>
		<transition condition="${true}">
			<targetStepName>file failed to be created</targetStepName>
		</transition>
		
		<script>
			<![CDATA[
				import groovy.xml.*
				import groovy.xml.XmlUtil
//				import com.levelsbeyond.timecode.TimecodeFormat
				import java.io.File
				import java.io.FileOutputStream
				import java.io.IOException
				import java.io.StringWriter
				import org.apache.commons.logging.Log
				import org.apache.commons.logging.LogFactory
				import org.jdom2.Document
				import org.jdom2.Element
				import org.jdom2.output.Format
				import org.jdom2.output.XMLOutputter
				import javax.xml.transform.Transformer
				import javax.xml.transform.OutputKeys
				import javax.xml.transform.stream.StreamResult
				import javax.xml.transform.dom.DOMSource
				import javax.xml.transform.TransformerFactory
				
				final XMLOutputter rawXmlOutputter = new XMLOutputter(Format.getPrettyFormat())
				
				println('*************** HELLO ***********')
				/* EXECUTION */
				File file = new File("/reachengine/temp/testFile1.xml")
				FileWriter writer = new FileWriter(file)
				
				return xmlToString(buildXml())
				writer.write(xmlToString(buildXml()))
//				writer.write(buildXml().getText())
				writer.close()
				
				/* END EXECUTION */
				
				/* 	HELPER FUNCTIONS */
				Document buildXml() {
					// do your xml thing here to build the document
					Element root = new Element("MarquisEDL")
					root.setAttribute("version", "2.0")
					
//					root.addContent(createElement("FrameRate", TimecodeFormat.DROP_FRAME.equals(inputJSON.frameRateFormat.asText()) ? "DF" : "NDF"))
					Element clipList = new Element("ClipList")
					root.addContent(clipList)
					Element clip = new Element("Clip")
					clipList.addContent(clip)
					clip.addContent(createElement("UID", uuidTitle))
					clip.addContent(createElement("Title", uuidTitle))
					clip.addContent(createElement("File", inputJSON.filePath.asText()))

					clip.addContent(createElement("Start", inputJSON.startTimecode.asText()))

					clip.addContent(createElement("End", inputJSON.endTimecode.asText()))
					clip.addContent(createElement("NumberVideoTracks", inputJSON.numberVideoTracks.asText()))
					clip.addContent(createElement("NumberAudioTracks", inputJSON.numberAudioTracks.asText()))
					
					return new Document(root)
				}
				
				Element createElement(String name, String text) {
					Element e = new Element(name)
					e.setText(text)
					return e
				}
				
				String xmlToString(Document doc) {
					Transformer transformer = TransformerFactory.newInstance().newTransformer()
					transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "no")
					transformer.setOutputProperty(OutputKeys.METHOD, "xml")
					transformer.setOutputProperty(OutputKeys.INDENT, "yes")
					transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8")
					StringWriter stringWriter = new StringWriter()
					transformer.transform(new DOMSource( (Node) doc), new StreamResult(stringWriter))
					return stringWriter.toString()
				}
			
				return file
	
			]]>
		</script>
		
	</groovyStep>
	
	<!-- ................................................... End Steps .................................................... -->
	<!-- fail -->
	<failWorkflowStep name="file failed to be created"
		executionLabelExpression="file failed to be created"
		reasonExpression="file failed to be created"
	/>
	
	<!-- success -->
	<noopStep name="end" />
	<!-- ................................................... Data Defs .................................................... -->
	<!-- ............ INPUT ............. -->
	<contextDataDef name="inputJSON"                dataType="JSON" />
	
	<!-- ......... PROCESSING ........... -->
	<!--<contextDataDef name="xmlFile"                  dataType="File" />-->
	<contextDataDef name="uuidTitle"                dataType="String"           defaultDataExpression="${#uuid()}"/>
	
	<!--<contextDataDef name="requestXML2"               dataType="XML"             defaultDataExpression="${xmlFile}"/>-->

	<!--<contextDataDef name="xmlString"                dataType="String"           defaultDataExpression="${new org.jdom.output.XMLOutputter().outputString(requestXML2)}" />-->
	<contextDataDef name="testVal"                  dataType="Boolean" />
	
	<contextDataDef name="xmlString"                dataType="String" />
 
 
</workflow>